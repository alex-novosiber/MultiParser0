#
#   Configuration file for parsers
#   Oleg Gyunter 2021
#
#          REGEXP Achtung !!! All strings converted in
#                 https://native2ascii.net/
#      from (\\\"[\uFFFD-\uFFFD\uFFFD-\u07F8\uFFFDa-zA-Z\\s\\,]*\\\")   to   (\\\"[\uFFFD-\uFFFD\uFFFD-\u07F8\uFFFDa-zA-Z\\s\\,]*\\\")
#
#       https://novosibirsk.n1.ru/kupit/kvartiry/?has_photos=true&author=owner&limit=25
# Thread.sleep(3 * 1000);
threadSleep=6
#column ON | OFF | YES | yes | 1 | TRUE | true
col1Use=true
col2Use=TRUE
col3Use=1
col4Use=ON
col5Use=YES
col6Use=yes
col7Use=1
col8Use=on
col9Use=1
col10Use=1
col11Use=yes
col12Use=1
col13Use=1
col14Use=1
col15Use=ON
col16Use=
col17Use=
col18Use=
col19Use=0
col20Use=0
col1Name=\u041A\u043E\u043B-\u0432\u043E \u043A\u043E\u043C\u043D\u0430\u0442
col2Name=\u0410\u0434\u0440\u0435\u0441
col3Name=\u0413\u043E\u0440\u043E\u0434
col4Name=\u0416\u0438\u043B\u043C\u0430\u0441\u0441\u0438\u0432
col5Name=\u041E\u0431\u0449. \u043F\u043B\u043E\u0449\u0430\u0434\u044C
col6Name=\u0414\u043E \u043C\u0435\u0442\u0440\u043E
col7Name=\u0420\u0430\u0439\u043E\u043D
col8Name=\u042D\u0442\u0430\u0436
col9Name=\u042D\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043E\u043C\u0435
col10Name=\u0446\u0435\u043D\u0430
col11Name=\u0417\u0430 \u043A\u0432.\u043C
col12Name=\u0412\u043B\u0430\u0434\u0435\u043B\u0435\u0446
col13Name=\u0422\u0435\u043B\u0435\u0444\u043E\u043D
col14Name=email
col15Name=\u0421\u0421\u042B\u041B\u041A\u0410
col16Name=
col17Name=
col18Name=
col19Name=reTested
col20Name=tttt
# ColsParseLogic.Methods to parse Data from div._main block
# list of available ColsParseLogic.Methods:
#    parseRow
#    getText
#    GetMatcingOwnText
#    getGetClearTwice
#    getURL
#    patternParseTwoPatterns
parseRowParameters=tableCol1, rows, col1Class, col1ReplaceFrom, col1ReplaceTo
col2Method=parseRow
col3Method=parseRow
col4Method=parseRow
col5Method=parseRow
col6Method=parseRow
col7Method=parseRow
col8Method=parseRow
col9Method=parseRow
col10Method=getElementsContainingOwnText
col11Method=getElementsMatchingOwnText
col12Method=patternParseTwoPatterns
col13Method=patternParseTwoPatterns
col14Method=patternParseOnce
col15Method=parseRowDoubleFor
col16Method=parseRow
col17Method=parseRow
col18Method=parseRow
col19Method=parseRow
col20Method=parseRow
# outputFileName
outputFileName=NGS-Kupit_
# URL for searching. Query parameters is present In URL
url=https://novosibirsk.n1.ru/kupit/kvartiry/?has_photos=true&author=owner&limit=
# ALL ads
# url=https://novosibirsk.n1.ru/kupit/kvartiry/?&limit=
# maxbodySyze in bytes
maxbodySyze=0
# amount of ads per page
# also used in
#  digit = digit/25;
adsPerPageLimit=50
# connecting timeout in seconds
# .timeout(1000*30)
jsoupConnectTimeOut=30
#       " \u041A\u0432\u0430\u0440\u0442\u0438\u0440\u044B 996 \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0439 "
# cssQuery for count of TOTAL founded ads
adsFounded=span[itemprop=item]
# cssQuery for Main DIV , that contains all Ad's
#           Elements rows = dc.select("div._main");
divMain=div._main
# cssQuery for search in divMain  "1-\u043A" or "2-\u043A"
# col1Name=
col1Class=link-text
col1Method=parseRow
col1ReplaceFrom=\\,[\u0430-\u044F\u0410-\u042F\u0451\u0401_a-zA-Z\\s\\,-\\\\]*
col1ReplaceTo=
col1Pattern1=
col1Pattern2=
col1Matcher1=
col1Matcher2=
#  "\u0414\u0435\u0440\u0436\u0430\u0432\u0438\u043D\u0430 77/1"
col2Class=link-text
col2ReplaceFrom=\\d\\-\u043A\\,
col2ReplaceTo=
col2Pattern1=
col2Pattern2=
col2Matcher1=
col2Matcher2=
#\u041D\u043E\u0432\u043E\u0441\u0438\u0431\u0438\u0440\u0441\u043A
col3Class=living-list-card-city-with-estate__item
col3ReplaceFrom=\\,
col3ReplaceTo=
col3Pattern1=
col3Pattern2=
col3Matcher1=
col3Matcher2=
#  "\u0416\u0438\u043B\u043E\u0439 \u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441 \u00AB\u041E\u0430\u0437\u0438\u0441\u00BB"
col4Class=living-list-card-city-with-estate__link
col4ReplaceFrom=\\,
col4ReplaceTo=
col4Pattern1=
col4Pattern2=
col4Matcher1=
col4Matcher2=
# "105 \u043C2\u00BB"
col5Class=living-list-card-area
col5ReplaceFrom=\\,
col5ReplaceTo=
# "\u0421\u0442\u0443\u0434\u0435\u043D\u0447\u0435\u0441\u043A\u0430\u044F 6 \u043C\u0438\u043D"
col6Class=card-metro
col6ReplaceFrom=\\,
col6ReplaceTo=
# "\u041E\u043A\u0442\u044F\u0431\u0440\u044C\u0441\u043A\u0438\u0439 \u0440\u0430\u0439\u043E\u043D \u041A\u043B\u044E\u0447-\u041A\u0430\u043C\u044B\u0448\u0435\u043D\u0441\u043A\u043E\u0435 \u043F\u043B\u0430\u0442\u043E,"
col7Class=search-item-district
col7ReplaceFrom=\\,
col7ReplaceTo=
# "17 \u044D\u0442\u0430\u0436"    (\u0438\u0437 17/25 )
col8Class=living-list-card-floor__item
col8ReplaceFrom=\\/\\s\\d*\\s
col8ReplaceTo=
# (\u0438\u0437 17/25 )  \u044D\u0442\u0430\u0436\u043D\u043E\u0441\u0442\u044C
#           Elements td = row.getElementsByClass("living-list-card-floor__item");
col9Class=living-list-card-floor__item
col9ReplaceFrom=\\d*\\s\\/\\s^d\u044D\u0442\u0430\u0436,
#col9ReplaceFrom=\\d*\\s\\/\\s" + "|\u044D\u0442\u0430\u0436,
col9ReplaceTo=
col10Class=div.living-list-card-price__item._object
col10getElementsContainingOwnText=000
col10ReplaceFrom=\\+
col10ReplaceTo=
col10Pattern1=
col10Pattern2=
col10Matcher1=
col10Matcher2=
col11Class=div.living-list-card-price__item._per-sqm
col11getElementsMatchingOwnText=\\d
col11ReplaceFrom=\\s2
col11ReplaceTo=
col11Pattern1=
col11Pattern2=
col11Matcher1=
col11Matcher2=
col12Class=div.living-list-card-price__item._per-sqm
col12getElementsMatchingOwnText=\\d
col12ReplaceFrom=\\s2
col12ReplaceTo=
col12SelectScript=script:containsData(blockFotoramaData)
col12Pattern1=(?:\\\"contact_name\\\"\\:\\\"[\u0430-\u044f\u0410-\u042f\u0451\u0401a-zA-Z\\s\\,\\.\\(\\)]*\\\")
col12Pattern2=(\\\"[\u0430-\u044f\u0410-\u042f\u0451\u0401a-zA-Z\\s\\,\\.\\(\\)]*\\\")
col13Class=div.living-list-card-price__item._per-sqm
col13getElementsMatchingOwnText=\\d
col13ReplaceFrom=\\s2
col13ReplaceTo=
col13SelectScript=script:containsData(blockFotoramaData)
col13Pattern1=\\\"contact_phones\\\"\\:\\[\\{\\\"value\\\"\\:\\\"\\d*\\\"
col13Pattern2=\\\"\\d*\\\"
col13Matcher1=
col13Matcher2=
col14Class=div.living-list-card-price__item._per-sqm
col14getElementsMatchingOwnText=\\d
col14ReplaceFrom=\\s2
col14ReplaceTo=
col14SelectScript=script:containsData(blockFotoramaData)
col14Pattern1=(.?\\\"contact_email\\\"\\:\\\"[\u0430-\u044f\u0410-\u042fa-zA-Z0-9._%@+-]*@[\u0430-\u044f\u0410-\u042fa-zA-Z0-9._%@+-]*\\.[\u0430-\u044f\u0410-\u042fa-zA-Z]*\\\")|(.?\\\"contact_email\\\"\\:\\\"\\[*]*)
col14Pattern2=\\\"\\d*\\\"
col14Matcher1=
col14Matcher2=
col14ReplaceFrom1=\\,\\\"contact_email\\\"\\:\\\"
col14ReplaceTo1=
col14ReplaceFrom2=\\\"
col14ReplaceTo2=
col15Class=link
col15Class2=a.link
col15Class3=abs:href
col15getElementsMatchingOwnText=\\d
col15ReplaceFrom=\\s2
col15ReplaceTo=
col15SelectScript=script:containsData(blockFotoramaData)
col15Pattern1=(.?\\\"contact_email\\\"\\:\\\"[\u0430-\u044f\u0410-\u042fa-zA-Z0-9._%@+-]*@[\u0430-\u044f\u0410-\u042fa-zA-Z0-9._%@+-]*\\.[\u0430-\u044f\u0410-\u042fa-zA-Z]*\\\")|(.?\\\"contact_email\\\"\\:\\\"\\[*]*)
col15Pattern2=\\\"\\d*\\\"
col15Matcher1=
col15Matcher2=
col15ReplaceFrom1=\\,\\\"contact_email\\\"\\:\\\"
col15ReplaceTo1=
col15ReplaceFrom2=\\\"
col15ReplaceTo2=
# cssQuery for search price like this = "4 250 000"
#           Elements rows10 = dc.select("div.living-list-card-price__item._object");
price=div.living-list-card-price__item._object
# regExp for searching price
#    Elements tdddd = row.getElementsContainingOwnText("000");
searchInPrice=living-list-card-price__item _object
# cssQuery for search price per sq.m like this = "61 151 /\u043C2"
#    Elements rows11 = dc.select("div.living-list-card-price__item._per-sqm");
pricePerSQM=div.living-list-card-price__item._per-sqm
# cssQuery for search link like this = "https://novosibirsk.n1.ru/view/32746788/"
#    Elements tdddd2 = row.getElementsByClass("link");
link=link
# REGEXP Achtung !!! All strings converted in
#                 https://native2ascii.net/
#      from (\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,]*\\\")   to   (\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,]*\\\")
#   Pattern pattern1 = Pattern.compile(pattern1FromConfig);
#   (?:\\\"contact_name\\\"\\:\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,]*\\\")   getting BLOCK with owner Names
#pattern1FromConfig =(?:\\\"contact_name\\\"\\:\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\(\\)\\,]*\\\")
pattern1FromConfig=\\\"contact_name\\\"\\\:\\\"(.)*\\\",
#  Pattern pattern2 = Pattern.compile(pattern2FromConfig);
#  (\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,]*\\\")  getting TEXT from BLOCK - owner Names
pattern2FromConfig=(\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,]*\\\")
pattern3FromConfig=\\\"contact_phones\\\"\\:\\[\\{\\\"value\\\"\\:\\\"\\d*\\\"
pattern4FromConfig=\\\"\\d*\\\"
pattern5FromConfig=
pattern6FromConfig=
pattern7FromConfig=
pattern8FromConfig=
pattern9FromConfig=
pattern10FromConfig=
# regexp for OwnerName
patternOwnerNameFromConfig=(?:\\\"contact_name\\\"\\:\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,\\(\\)\\.]*\\\")
# regexp for OriginalName
patternOriginalNameFromConfig=(\\\"[\u0430-\u044F\u0410-\u042F\u0451\u0401a-zA-Z\\s\\,\\(\\)\\.]*\\\")
# regexp for Phone number
patternPhoneTempFromConfig=\\\"original_phones\\\"\\:\\[\\{\\\"value\\\"\\:\\\"\\d*\\\"
# regexp for OriginalPhone
patternOriginalPhoneFromConfig=\\\"\\d*\\\"
# regexp for email
patternEmailFromConfig=(.?\\\"contact_email\\\"\\:\\\"[\u0430-\u044F\u0410-\u042Fa-zA-Z0-9._%@+-]*@[\u0430-\u044F\u0410-\u042Fa-zA-Z0-9._%@+-]*\\.[\u0430-\u044F\u0410-\u042Fa-zA-Z]*\\\")|(.?\\\"contact_email\\\"\\:\\\"\\[*]*)
